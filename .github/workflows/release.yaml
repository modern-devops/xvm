on:
  pull_request:
  push:
    branches: [main]
    tags: ["v*"]

env:
  GO_VERSION: "1.21.0"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit-test:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: test
        run: go test ./...

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: build
        run: |
          tag="${{ github.ref }}"
          ver="${tag##*/}"
          app="xvm"
          [ ! -d dist ] || mkdir dist
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -trimpath -buildvcs=false -mod=readonly -ldflags "-X 'main.version=$ver'" -o dist/$app-darwin-arm64 ./cmd
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -trimpath -buildvcs=false -mod=readonly -ldflags "-X 'main.version=$ver'" -o dist/$app-darwin-amd64 ./cmd
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -trimpath -buildvcs=false -mod=readonly -ldflags "-X 'main.version=$ver'" -o dist/$app-linux-amd64 ./cmd
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -trimpath -buildvcs=false -mod=readonly -ldflags "-X 'main.version=$ver'" -o dist/$app-linux-arm64 ./cmd
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -trimpath -buildvcs=false -mod=readonly -ldflags "-X 'main.version=$ver'" -o dist/$app-windows-x64.exe ./cmd
          CGO_ENABLED=0 GOOS=windows GOARCH=386 go build -trimpath -buildvcs=false -mod=readonly -ldflags "-X 'main.version=$ver'" -o dist/$app-windows-x86.exe ./cmd
      - name: publish artifacts
        uses: actions/upload-artifact@v3
        with:
          name: executables
          path: dist/*

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    environment: create_release
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: validate tag on main
        shell: pwsh
        run: |
          git checkout main
          $mainsha = $(git show-ref refs/heads/main --hash)
          $tagsha = $(git show-ref ${{ github.ref }} --hash)
          Write-Output "refs/heads/main: $mainsha"
          Write-Output "${{ github.ref }}: $tagsha"
          if ($mainsha -ne $tagsha) {
            Write-Error "tag must match HEAD of main"
            exit 1
          }
      - name: download artifacts
        uses: actions/download-artifact@v3
        with:
          name: executables
          path: dist
      - name: create release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            dist/xvm-darwin-arm64
            dist/xvm-darwin-amd64
            dist/xvm-linux-amd64
            dist/xvm-linux-arm64
            dist/xvm-windows-x64.exe
            dist/xvm-windows-x86.exe
